function [NEVgen] = generate_anev_roi_model(FN,LAG,TS,Ttrans,FG,B)

% This function takes in a functional network specification and a set
% of generation and observation parameters.  The function then
% generates a causal set of time-series of neural events, one
% time-series for each specificed ROI
%    
%Parameters
% FN     - the true functional network (a NxN matrix of probabilites
%          indicating directed connections between nodes
% LAG    - the neural lag of the functional network
% TS     - number of seconds simulated
% Ttrans - number of transient simulation steps (usually set to one
%          kernel width at FG)
% FG     - maximum frequency of neural event generation (Hz)
% B      - ROI bias (background tendency to spike)
%
%Outputs
% NEVgen - Nx(TS*FG+Trans) matrix of neural events (1's or 0's)
   
  [N,N] = size(FN); % the num of ROIs
  
  %Calc simulation steps related to simulation time
  Bn = TS*FG+Ttrans;
  
  %Hangle lag conversion to discrete steps
  LAGstep = floor(LAG/(1./FG));
  LAGrem = (LAG/(1./FG))-LAGstep;  %Leftover time that doesn't fit
  
  %Add random external neural events
  NEVgen = zeros(N,Bn); 
   
  %Determine random external activity
  rand_indices = zeros(N,Bn);
  for i = 1:N
      
      %Generate a random temporal ordering
      rand_indices(i,:) = randperm(Bn);   
      
      %Include the first Bn(i) frac of those indices
      NEVgen(i,rand_indices(i,1:round(B(i).*Bn))) = 1;
      
  end
  
  %Simulate the interaction of nodes
  for curr_time = 1:Bn

      for curr_node = 1:N
          
          if NEVgen(curr_node,curr_time) ~= 0 
              
              %the current node at the current time has a neural
              %event, therefore compute future neural events
              %generated by this neural event
              
              for nbr_node = 1:N

                  %For each possible connection
                  if rand(1)<FN(curr_node,nbr_node);
                      
                      %Register the event passed between rois
                      new_event_node = nbr_node;
                      
                      %Register the time the event is to arrive
                      lag_step = LAGstep(curr_node,nbr_node);
                      lag_extra = rand(1)<LAGrem(curr_node, ...
                                                 nbr_node);
                      new_event_time = curr_time + lag_step + lag_extra;
                      
                      if(new_event_time <= Bn)
                          
                          %Set future neural event, o/w won't be observed
                          NEVgen(new_event_node,new_event_time) = 1;
                          
                      end
                      
                  end
                  
              end
              
          end
          
      end
  
  end